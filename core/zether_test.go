package core

import (
	"github.com/hpb-project/HCash-SDK/common/types"
	"github.com/hpb-project/HCash-SDK/core/ebigint"
	"gotest.tools/assert"
	"strings"
	"testing"
)

func TestZetherProof(t *testing.T) {
	special_Random = true
	special_RandomV = ebigint.FromHex("c3f4db6cd90e04d6e086f73fdb7a4ccaa4f57e48593d80c11c0fdd1fcac348df").ToRed(b128.Q())

	zeth := NewZetherProver()
	var CLn = make([]types.Point, 2)
	CLn[0] = types.Point{"0x2b6dc01a49982bfcbfb49a091a80758244ea78ee166931c4d679a7d2681fcccf", "0x0278ef49a7bbf8ccd4003ec6cd4689595062811c39f68664a1a8dc6d11447933"}
	CLn[1] = types.Point{"0x0dd30ebd35990f92ff8e398908635d1bd949b77663f0a060ef2872ca965f1ffb", "0x00246f9105a20fa6fe289a6812e0a8885127ed0c3b6a99735bc08c7ceb58cf59"}
	var CRn = make([]types.Point, 2)
	CRn[0] = types.Point{"0x14fe37158cc51254aa0ed3ca5b228bdf21e8d27f804c90d1a71dac78ce40f1b5", "0x00ab2fb4e6ccc59851dee900c4d7b8b080c779217ee3704bd373b1aedc76fd3e"}
	CRn[1] = types.Point{"0x14fe37158cc51254aa0ed3ca5b228bdf21e8d27f804c90d1a71dac78ce40f1b5", "0x00ab2fb4e6ccc59851dee900c4d7b8b080c779217ee3704bd373b1aedc76fd3e"}
	var C = make([]types.Point, 2)
	C[0] = types.Point{"0x0c59ba24b1ef2f85534cbf11017cc3a41f3987ea6b04f6fa0dcedc416dbd5624", "0x2941614917c49efcc09db3d74654b04ce864cb9b43de677db2172cfed3e73efd"}
	C[1] = types.Point{"0x2115e60097e2f075e227829b83b52d4f691b79fb4b530a23bd5a5eb655b3445b", "0x2eb55ed5709bedba6307d59392bf55b992579c1e439d0f775450822baccfa52f"}
	var D = types.Point{"0x0b5f411bf6c261a2b865cea00230d5a0c1fedcb6caee8c4c54e818d09dd8f8c3", "0x06ddffef614e0e1ca581057871a6f067470fe09f7a847c4e6475b1367a01a6f9"}
	var y = make([]types.Point, 2)
	y[0] = types.Point{"0x07121c805d96cbf8204eec59ebc495d2b9dfb365c6521af2609fd172bd2c2887", "0x24ee9f1862c1bd9ed0ad88b7f90376e3f237637f47ddc03a4b4353355d415272"}
	y[1] = types.Point{"0x2b621590db6b2e3ca3f0e562ed05487caa26ae88c6e1f54883a04e51f6664bc1", "0x2c1173b211a55f5397ff869ae2feecad664a80730f4f6236a8664a167577ece7"}
	var epoch = 53687137

	var sk = "20a89bb465e9e2262e25901525509686f6a26b2fba976f1d9ff00a0cdbb362b0"
	var r = "2296c63311038849058a5a831a333ee2c3643aba005bf3cf98dd4c6972a79d1d"

	var bTransfer = 1
	var bDiff = 1
	var index = []int{1, 0}

	var istatement = TransferStatement{
		CLn:   CLn,
		CRn:   CRn,
		C:     C,
		D:     D,
		Y:     y,
		Epoch: epoch,
	}
	var iwitness = TransferWitness{
		BTransfer: bTransfer,
		BDiff:     bDiff,
		Index:     index,
		SK:        sk,
		R:         r,
	}
	proof := zeth.GenerateProof(istatement, iwitness)
	assert.Assert(t, proof != nil)
	expect := "0x3018c8dfba68879361596c9cf75a0fbafa003da708ed47cdf81adbfaadb3c743086a8b7fe26b88e1473a3f450bb8fd4a414163b6234484e41e7a2e1c92e0558c0441c9ef4729abd3183f694d760709ea34f3e243e0735966a2f94bbb60455e6e14dc30ec3ed6ffb89d0c6cc8c7cec43db1bd893f23561f58d5e4d2fad5f51d0d0e9e9ba3daa53af4525091b88a75e14623d511f250c5f4524a46e4bd80d8a95e1929f23315bc3839efe5ddbcaf0196694b9344c5ab81472a33302aed64b89e8121fd7e0edd6322f8429990a1579195550286e57419642d646cb4a0329f1dcbec2cca34be6a020c0c1f4549f7f3fb56f2fa12402a20373896a8e43f763b92440508220980a81c3db250d29a8c68eee6dbe6ba279e3dcb49df680db42402c70e110c4ccdde830a5da0de4b48098d7d13ecd909954562452c1ce638fd30adbf6c0c20710d65688c288d13a36884422807e5f49fb3785023d49067d1f1f1107cb48409ad6933875e421a71f1ed619764ee73b0f628126ca9fe4c153368ed515e6db92f95ba775a4fcded26caad2cd87df00cf48e5f118e73aac8a629f1cd31e0a12913e79f023178cd7961074f27b16df92734245475a5d265378101e19ae303273820710d65688c288d13a36884422807e5f49fb3785023d49067d1f1f1107cb48409ad6933875e421a71f1ed619764ee73b0f628126ca9fe4c153368ed515e6db92740cbd99f98b7647c86db1896703ae3131335ccf05c977208f2bac44244d3440a4ef8ed0c44bbaade83abe208485b1bfd909711ac502f555bb2db66048efac920710d65688c288d13a36884422807e5f49fb3785023d49067d1f1f1107cb48409ad6933875e421a71f1ed619764ee73b0f628126ca9fe4c153368ed515e6db91a3b2c2c87f82b2f206bd9bad44b4efa3862dae0440f496e2c7fd30e1ab6a3851649fe6bde14fcfbf084731e8109cc7c23d63ccc92307b748d9a9c06d1cba4dc20710d65688c288d13a36884422807e5f49fb3785023d49067d1f1f1107cb48409ad6933875e421a71f1ed619764ee73b0f628126ca9fe4c153368ed515e6db904709b1f259df788382f8563abcad60f63d66a7a473782fa8d2561e3112b4c400263a1a15447842fff45e065d574eb560425dd267257be7c0c8806d00ac348db07c4b809dcaff216120982ea65aa542ebf7fa610f963e532d6b9a7766cda71950e032f9f5b610037e4c49f730892811f13ac135cff1e3b683e28c05df5b5982d0361bb953b3785ef1080b430b18b66409f9cda6dc662e95424f1bfc4bcd4fc530430eeafe2096412344ea49ad090a14372b6f6d00620c71b39fa38b33af278f42ffdcbf1e541d9a1ef6a630f0df07746ec4912427b7e642776d0137170e53b1c2ea5f3161ee22227a1be839e1f775ad828c694c6e97e99ef06495e33bef66b5319c8d4768df48f1bad6263a1ba317a148320db644fdad622bdc3049c3ef251d12bccb6f7cbe116b3438afeb6273d349aee725a64710d3ea9b117e17ee75d49780a0894ba203907985ac737ab0ea6f79b3549ef7c203a94f50611f122ad9c70442fb2f35f8e540c9e9451ec121c7c967e0b0fa73552f387cc62dbacaf01e1e1dc06a3a73fe1a32a56a77a3d00198d84c78509bfa01c3d89aed7be6159500b791d018be8b6aabbdcf406139244bbae7831cb7c9f0b9eedbd23d606ba5f8ea496ef22d87a6084634d17ae3c9194ac1cc248c89574fe46c1b5470ed92a25dc7b3dc6066c6a00c8d5507b50042b39665b954c32eadb440bd18ad45d0e17a2e7fe610c0bca57685b46a67eab2ad447ee9b2a73729025ca5534ea71aad507b7db9015c11d7cfc544054ae96b124d609ae4b3ce76af6f808dfb764ab2fb283d7401d61ef062ee2e85bf709a895e74a6cfbe719535f62b300aa46f65f68d4098932b2184923ad82dc103dfc30368321c672c671b0068030eba77e3765a45b1eccdbc9f5e5213b9253e98e0d3710b8aeff7c8c1de4f7bc46c39abf4364613424cfe4e8b9770fc32920b877c3c5c0e56b9779b8ae204a682c00b1083be2a5986536b8fdf95e0e551648f9651893001f2f3181bab8ef44aaa1a53626269358f0639fad32e16c1acb2f24e309776af8b849979e64624b52adc5870e566f86ebb3d50e4d588ea720601c8e81462b1b3e30573a094b5db5287e67cb04afeaad17009b0ab6cbfa8628f60d7a7bbfb05f9fa6dcecbefb8f1b3917e7b82b1d25530712a95e29de773f0065794ffe85731cd7d77ac60cd5129daa5b50127a77a3dea49d165b3784dc8027b8d0e0b3960161a61e50cae750c1b32c9ff054035261fcd26c2b34598d379f06e3c0f04ee75f9d608e296ada83a36be81a4f7891519e40de30ae1ab5fbd5900f93a570ce07a985f2025eab851bf7ec3760c73c338b9c0771ed1979090cb64a05dd75589c6c33d181a63625ec2537af7e3a01bc5f0da3bee84858fff99530e61d5fda1a318bb53b10329013994d6eb56c8926a6e61154c347e4bfe9fd44ad4506016be709bfdc0d83705b79c08e557c0f5c436d5d9463fb5729fd4f7b86e0a908ffbb70d621751af99aab39e7f872666f2f4541011533bf5a343159ac856db30150d7c602b09617d4157fb194cc106f74b01b036c954ba1f7685da81d98e3f8098f7501e046ea234e98ef8621770e3b279d829cc36278cc4e8123b3d77be75d22598402ef5cf4d0b50a0f1227f7d1de5905967e5639cb731d31539722d19bf80acc1927f852b4f168278da06fc0bb7397b81335b6dbc66fee14f64cecd4f060237cffca9d021c32699514f66731efe57861d7623af5672fcae0924a34bb34cd2e11563290bbcc115bc6992be0ac6b7423113fe3c51e3f75580523271c4b9c0f"
	assert.Assert(t, strings.Compare(proof.Serialize(), expect) == 0)
}
